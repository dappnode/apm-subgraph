type Registry @entity {
  id: ID!
  address: Bytes! # Registry address
  name: String! # Registry name
  repoCount: Int!
  versionCount: Int!
  repos: [Repo!]
  #factory: RegistryFactory! @derivedFrom(field: "registries")
}

type Repo @entity {
  id: ID! # Repo ENS address
  address: Bytes! # Repo address
  name: String! # Repo name
  node: Bytes! # Repo ENS
  timestamp: Int! # Publish block timestamp
  lastVersion: Version # Last Version
  versionCount: Int!
  versions: [Version!] # List of versions
  registry: Registry! @derivedFrom(field: "repos")
  registryName: String! # .dnp.dappnode.eth
  registryId: String! # To retrieve the registry
}

type Version @entity {
  id: ID! # ID concat codeAddress & semanticVersion
  semanticVersion: String! # Semantic version
  codeAddress: Bytes! # App implementation address
  contentUri: String! # Content URI
  index: Int! # Version index (version.versionId)
  timestamp: Int! # Publish block timestamp
  repoName: String! # Repo name
  repoAddress: Bytes! # Repo address
  repoNamehash: Bytes! # Repo ENS node
  registryName: String! # .dnp.dappnode.eth
}

# We keep a registry of the hash that were not resolved to try fetch them again

type IpfsHash @entity {
  id: ID! # ID
  hash: String
}
